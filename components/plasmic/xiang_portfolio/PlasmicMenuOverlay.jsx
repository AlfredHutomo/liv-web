// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9exzG1GT62JcZadLz4owTA
// Component: 46iviTGWOP
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: odSb3nMDUr/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_xiang_portfolio.module.css"; // plasmic-import: 9exzG1GT62JcZadLz4owTA/projectcss
import * as sty from "./PlasmicMenuOverlay.module.css"; // plasmic-import: 46iviTGWOP/css
import Line17Icon from "./icons/PlasmicIcon__Line17"; // plasmic-import: nikmI0ruPN/icon
import Line8Icon from "./icons/PlasmicIcon__Line8"; // plasmic-import: nSlOqcrTXe/icon
import IconmonstrWhatsapp11Icon from "./icons/PlasmicIcon__IconmonstrWhatsapp11"; // plasmic-import: 1uWd_133mT/icon
import IconmonstrInstagram111Icon from "./icons/PlasmicIcon__IconmonstrInstagram111"; // plasmic-import: xfIkq-3otM/icon
import IconmonstrPinterest11Icon from "./icons/PlasmicIcon__IconmonstrPinterest11"; // plasmic-import: VGZUFkb_F/icon

export const PlasmicMenuOverlay__VariantProps = new Array();

export const PlasmicMenuOverlay__ArgProps = new Array();

function PlasmicMenuOverlay__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"group25"}
          data-plasmic-override={overrides.group25}
          hasGap={true}
          className={classNames(defaultcss.all, sty.group25)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"back2"}
              data-plasmic-override={overrides.back2}
              className={classNames(defaultcss.all, sty.back2)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(defaultcss.all, sty.link__yyGg1)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(
                      defaultcss.button,
                      defaultcss.__wab_text,
                      sty.button
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "“Back”"
                      : "“Back”"}
                  </button>
                </p.PlasmicLink>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicIcon
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Line17Icon
                  : Line17Icon
              }
              className={classNames(defaultcss.all, sty.svg__z7Jqf)}
              role={"img"}
            />
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"buttons"}
          data-plasmic-override={overrides.buttons}
          hasGap={true}
          className={classNames(defaultcss.all, sty.buttons)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicLink
              className={classNames(defaultcss.all, sty.link__g0Rr6)}
              component={Link}
              href={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "/"
                  : undefined
              }
              platform={"nextjs"}
            >
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Home"
                  : "Home"}
              </div>
            </p.PlasmicLink>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"link2"}
              data-plasmic-override={overrides.link2}
              className={classNames(defaultcss.all, sty.link2)}
            >
              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link__vCn3K
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "/about"
                    : undefined
                }
                platform={"nextjs"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "About"
                  : "About"}
              </p.PlasmicLink>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"link3"}
              data-plasmic-override={overrides.link3}
              className={classNames(defaultcss.all, sty.link3)}
            >
              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link__b7TjA
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "/coming"
                    : undefined
                }
                platform={"nextjs"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Portfolio"
                  : "Portfolio"}
              </p.PlasmicLink>
            </div>
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"socials"}
          data-plasmic-override={overrides.socials}
          hasGap={true}
          className={classNames(defaultcss.all, sty.socials)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicIcon
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Line8Icon
                  : Line8Icon
              }
              className={classNames(defaultcss.all, sty.svg__w720E)}
              role={"img"}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <p.PlasmicLink
              className={classNames(defaultcss.all, sty.link__qW5Au)}
              component={Link}
              platform={"nextjs"}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? IconmonstrWhatsapp11Icon
                      : IconmonstrWhatsapp11Icon
                  }
                  className={classNames(defaultcss.all, sty.svg__ngMpw)}
                  role={"img"}
                />
              ) : null}
            </p.PlasmicLink>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <p.PlasmicLink
              className={classNames(defaultcss.all, sty.link__lh6Q8)}
              component={Link}
              platform={"nextjs"}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? IconmonstrInstagram111Icon
                      : IconmonstrInstagram111Icon
                  }
                  className={classNames(defaultcss.all, sty.svg__in3Bn)}
                  role={"img"}
                />
              ) : null}
            </p.PlasmicLink>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <p.PlasmicLink
              className={classNames(defaultcss.all, sty.link__sxyuM)}
              component={Link}
              platform={"nextjs"}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? IconmonstrPinterest11Icon
                      : IconmonstrPinterest11Icon
                  }
                  className={classNames(defaultcss.all, sty.svg__cmIiO)}
                  role={"img"}
                />
              ) : null}
            </p.PlasmicLink>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicIcon
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Line8Icon
                  : Line8Icon
              }
              className={classNames(defaultcss.all, sty.svg___6GaiA)}
              role={"img"}
            />
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "group25",
    "back2",
    "button",
    "buttons",
    "freeBox",
    "link2",
    "link3",
    "socials"
  ],

  group25: ["group25", "back2", "button"],
  back2: ["back2", "button"],
  button: ["button"],
  buttons: ["buttons", "freeBox", "link2", "link3"],
  freeBox: ["freeBox"],
  link2: ["link2"],
  link3: ["link3"],
  socials: ["socials"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuOverlay__ArgProps,
      internalVariantPropNames: PlasmicMenuOverlay__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicMenuOverlay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuOverlay";
  } else {
    func.displayName = `PlasmicMenuOverlay.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuOverlay = Object.assign(
  // Top-level PlasmicMenuOverlay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group25: makeNodeComponent("group25"),
    back2: makeNodeComponent("back2"),
    button: makeNodeComponent("button"),
    buttons: makeNodeComponent("buttons"),
    freeBox: makeNodeComponent("freeBox"),
    link2: makeNodeComponent("link2"),
    link3: makeNodeComponent("link3"),
    socials: makeNodeComponent("socials"),
    // Metadata about props expected for PlasmicMenuOverlay
    internalVariantProps: PlasmicMenuOverlay__VariantProps,
    internalArgProps: PlasmicMenuOverlay__ArgProps
  }
);

export default PlasmicMenuOverlay;
/* prettier-ignore-end */
