// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9exzG1GT62JcZadLz4owTA
// Component: 2H0V71C99l
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonLink from "../../ButtonLink"; // plasmic-import: S0p9CCVZas/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: odSb3nMDUr/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_xiang_portfolio.module.css"; // plasmic-import: 9exzG1GT62JcZadLz4owTA/projectcss
import * as sty from "./PlasmicNav.module.css"; // plasmic-import: 2H0V71C99l/css
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: S3xG3HOwt4/icon

export const PlasmicNav__VariantProps = new Array("darkText");

export const PlasmicNav__ArgProps = new Array();

function PlasmicNav__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__darkText]: hasVariant(variants, "darkText", "darkText")
      })}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__eTxrs)}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__nDeWr, {
              [sty.freeBox__darkText__nDeWrmnh3R]: hasVariant(
                variants,
                "darkText",
                "darkText"
              )
            })}
          >
            <ButtonLink
              className={classNames("__wab_instance", sty.buttonLink___3ObXl, {
                [sty.buttonLink__darkText___3ObXlMnh3R]: hasVariant(
                  variants,
                  "darkText",
                  "darkText"
                )
              })}
              darkText={
                hasVariant(variants, "darkText", "darkText")
                  ? "darkText"
                  : undefined
              }
              label={"Home"}
              linkTo={"/"}
            />

            <ButtonLink
              className={classNames("__wab_instance", sty.buttonLink__a5EdE, {
                [sty.buttonLink__darkText__a5EdEmnh3R]: hasVariant(
                  variants,
                  "darkText",
                  "darkText"
                )
              })}
              darkText={
                hasVariant(variants, "darkText", "darkText")
                  ? "darkText"
                  : undefined
              }
              label={"About"}
              linkTo={"/about"}
            />

            <ButtonLink
              className={classNames("__wab_instance", sty.buttonLink__czk2O, {
                [sty.buttonLink__darkText__czk2Omnh3R]: hasVariant(
                  variants,
                  "darkText",
                  "darkText"
                )
              })}
              darkText={
                hasVariant(variants, "darkText", "darkText")
                  ? "darkText"
                  : undefined
              }
              label={"Portfolio"}
              linkTo={"/coming"}
            />
          </p.Stack>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <VectorIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNav__ArgProps,
      internalVariantPropNames: PlasmicNav__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNav__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNav";
  } else {
    func.displayName = `PlasmicNav.${nodeName}`;
  }
  return func;
}

export const PlasmicNav = Object.assign(
  // Top-level PlasmicNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicNav
    internalVariantProps: PlasmicNav__VariantProps,
    internalArgProps: PlasmicNav__ArgProps
  }
);

export default PlasmicNav;
/* prettier-ignore-end */
