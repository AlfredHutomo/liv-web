// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9exzG1GT62JcZadLz4owTA
// Component: bMdKBFFfzs
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavTop from "../../NavTop"; // plasmic-import: eCdmC84KTs/component
import TwoRowLayout from "../../TwoRowLayout"; // plasmic-import: 4XVncLvLu9/component
import Footer from "../../Footer"; // plasmic-import: qmi9gzc5EPV/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_xiang_portfolio.module.css"; // plasmic-import: 9exzG1GT62JcZadLz4owTA/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: bMdKBFFfzs/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__im5Eq)}>
            <NavTop
              data-plasmic-name={"navTop"}
              data-plasmic-override={overrides.navTop}
              className={classNames("__wab_instance", sty.navTop)}
              darkBg={"darkBg"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"theArtOfStoryTelling"}
              data-plasmic-override={overrides.theArtOfStoryTelling}
              hasGap={true}
              className={classNames(defaultcss.all, sty.theArtOfStoryTelling)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__vhD5W
                )}
              >
                {"The Art of \nSTORY TELLING"}
              </div>

              <div
                data-plasmic-name={
                  "photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2"
                }
                data-plasmic-override={
                  overrides.photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2
                }
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2
                )}
              >
                {
                  "Photography creates memories also stories creates memories also stories creates memories also stor  create smemories xretes memories\n"
                }
              </div>
            </p.Stack>
          </div>

          <TwoRowLayout
            className={classNames("__wab_instance", sty.twoRowLayout__or12W)}
          />

          <TwoRowLayout
            className={classNames("__wab_instance", sty.twoRowLayout__rzfGq)}
          >
            <img
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(defaultcss.img, sty.img)}
              role={"img"}
              src={"/plasmic/xiang_portfolio/images/img53571.jpeg"}
            />
          </TwoRowLayout>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navTop",
    "theArtOfStoryTelling",
    "photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2",
    "img",
    "footer"
  ],

  navTop: ["navTop"],
  theArtOfStoryTelling: [
    "theArtOfStoryTelling",
    "photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2"
  ],

  photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2:
    [
      "photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2"
    ],

  img: ["img"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navTop: makeNodeComponent("navTop"),
    theArtOfStoryTelling: makeNodeComponent("theArtOfStoryTelling"),
    photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2:
      makeNodeComponent(
        "photographyCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStoriesCreatesMemoriesAlsoStorCreateSmemoriesXretesMemories2"
      ),

    img: makeNodeComponent("img"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
